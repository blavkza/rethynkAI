const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const codeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode = model.startChat({
  generationConfig: codeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate to do app:Generate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```\nvite-react-todo/\n├── src/\n│   ├── components/\n│   │   ├── Task/\n│   │   │   ├── Task.js       // Individual task component\n│   │   │   ├── Task.css      // Task specific styles (optional)\n│   │   ├── TaskList/\n│   │   │   ├── TaskList.js   // Renders a list of tasks\n│   │   │   ├── TaskList.css  // TaskList specific styles (optional)\n│   │   ├── TaskForm/\n│   │   │   ├── TaskForm.js   // Input form to add new tasks\n│   │   │   ├── TaskForm.css  // TaskForm specific styles (optional)\n│   │   ├── Navigation/\n│   │   │   ├── Navigation.js // Navigation component (optional)\n│   │   │   ├── Navigation.css// Navigation specific styles (optional)\n│   ├── App.js            // Main application component\n│   ├── App.css           // Global application styles\n│   ├── index.css         // Tailwind CSS imports\n│   ├── main.jsx          // Entry point for React\n│   └── assets/           // (optional) Images, etc.\n├── public/\n│   └── vite.svg         // Vite logo (example)\n├── .gitignore\n├── index.html\n├── package.json\n├── vite.config.js\n├── README.md\n└── tailwind.config.js  // Tailwind configuration file\n\n```\n\n**tailwind.config.js:**\n\n```javascript\n/** @type {import(\'tailwindcss\').Config} */\nmodule.exports = {\n  content: [\n    "./index.html",\n    "./src/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {\n      // Optional: Customize Tailwind theme here\n    },\n  },\n  plugins: [],\n}\n```\n\n**index.html:**\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <link rel="icon" type="image/svg+xml" href="/vite.svg" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite + React + Tailwind Todo</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/main.jsx"></script>\n  </body>\n</html>\n```\n\n**src/main.jsx:**\n\n```jsx\nimport React from \'react\'\nimport ReactDOM from \'react-dom/client\'\nimport App from \'./App.js\'\nimport \'./index.css\' // Import Tailwind CSS\n\nReactDOM.createRoot(document.getElementById(\'root\')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n```\n\n**src/index.css:**\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n**src/App.js:**\n\n```jsx\nimport React, { useState, useEffect } from \'react\';\nimport TaskList from \'./components/TaskList/TaskList.js\';\nimport TaskForm from \'./components/TaskForm/TaskForm.js\';\nimport { Home, Menu } from \'lucide-react\';\nimport \'./App.css\';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  // Load tasks from localStorage on initial render\n  useEffect(() => {\n    const storedTasks = localStorage.getItem(\'tasks\');\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []);\n\n  // Save tasks to localStorage whenever tasks change\n  useEffect(() => {\n    localStorage.setItem(\'tasks\', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = (newTask) => {\n    setTasks([...tasks, { id: Date.now(), ...newTask }]);\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleComplete = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  return (\n    <div className="bg-gray-100 min-h-screen py-10">\n      <header className="container mx-auto p-4 flex items-center justify-between bg-white shadow rounded-lg mb-6">\n        <div className="flex items-center space-x-2">\n          <Home className="h-6 w-6 text-blue-500" />\n          <h1 className="text-2xl font-semibold">My Todo App</h1>\n        </div>\n        <Menu className="h-6 w-6 text-gray-600 cursor-pointer" />\n      </header>\n\n      <main className="container mx-auto">\n        <TaskForm addTask={addTask} />\n        <TaskList\n          tasks={tasks}\n          deleteTask={deleteTask}\n          toggleComplete={toggleComplete}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n**src/components/TaskForm/TaskForm.js:**\n\n```jsx\nimport React, { useState } from \'react\';\nimport { Plus } from \'lucide-react\';\n\nfunction TaskForm({ addTask }) {\n  const [text, setText] = useState(\'\');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (text.trim() !== \'\') {\n      addTask({ text, completed: false });\n      setText(\'\');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className="mb-6 bg-white shadow rounded-lg p-4">\n      <div className="flex items-center">\n        <input\n          type="text"\n          placeholder="Add a task..."\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          className="w-full p-2 rounded-md focus:outline-none focus:ring focus:border-blue-300"\n        />\n        <button\n          type="submit"\n          className="ml-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"\n        >\n          <Plus className="h-5 w-5 inline-block align-middle mr-1" />\n          Add\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default TaskForm;\n```\n\n**src/components/TaskList/TaskList.js:**\n\n```jsx\nimport React from \'react\';\nimport Task from \'../Task/Task.js\';\n\nfunction TaskList({ tasks, deleteTask, toggleComplete }) {\n  return (\n    <div>\n      {tasks.length === 0 ? (\n        <p className="text-gray-500 text-center">No tasks yet!</p>\n      ) : (\n        <ul>\n          {tasks.map((task) => (\n            <Task\n              key={task.id}\n              task={task}\n              deleteTask={deleteTask}\n              toggleComplete={toggleComplete}\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default TaskList;\n```\n\n**src/components/Task/Task.js:**\n\n```jsx\nimport React from \'react\';\nimport { Trash, Check, X } from \'lucide-react\';\n\nfunction Task({ task, deleteTask, toggleComplete }) {\n  return (\n    <li className="bg-white shadow rounded-lg p-4 mb-2 flex items-center justify-between">\n      <div className="flex items-center">\n        <input\n          type="checkbox"\n          checked={task.completed}\n          onChange={() => toggleComplete(task.id)}\n          className="mr-2 h-5 w-5 rounded accent-blue-500"\n        />\n        <span className={task.completed ? \'line-through text-gray-500\' : \'text-gray-800\'}>\n          {task.text}\n        </span>\n      </div>\n\n      <div>\n        <button onClick={() => deleteTask(task.id)} className="text-red-500 hover:text-red-700">\n          <Trash className="h-5 w-5" />\n        </button>\n      </div>\n    </li>\n  );\n}\n\nexport default Task;\n```\n\n**vite.config.js:**\n\n```javascript\nimport { defineConfig } from \'vite\'\nimport react from \'@vitejs/plugin-react\'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})\n```\n\n**package.json:**\n\n```json\n{\n  "name": "vite-react-todo",\n  "private": true,\n  "version": "0.0.0",\n  "type": "module",\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "preview": "vite preview"\n  },\n  "dependencies": {\n    "lucide-react": "^0.303.0",\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0"\n  },\n  "devDependencies": {\n    "@vitejs/plugin-react": "^4.2.1",\n    "autoprefixer": "^10.4.16",\n    "postcss": "^8.4.32",\n    "tailwindcss": "^3.4.0",\n    "vite": "^5.0.0"\n  }\n}\n```\n\n**Explanation and How to Run:**\n\n1.  **Project Structure:** The code is organized into a component-based structure.  Each component (Task, TaskList, TaskForm) resides in its own folder.  This promotes reusability and maintainability.\n\n2.  **Tailwind CSS:** The code utilizes Tailwind CSS for styling.  Ensure that you have Tailwind CSS configured correctly in your `index.css` file (using the `@tailwind` directives) and `tailwind.config.js`.  The classes are applied directly within the JSX of the components.\n\n3.  **Lucide React Icons:** The `lucide-react` library is used for icons. Icons are imported as needed and rendered within the components.\n\n4.  **React Hooks:**\n    *   `useState` is used to manage the state of the tasks.\n    *   `useEffect` is used to load tasks from `localStorage` when the component mounts and to save tasks to `localStorage` whenever the tasks array changes. This provides persistence across browser refreshes.\n\n5.  **Components:**\n    *   **App:** The main component that manages the state of the tasks and renders the other components.\n    *   **TaskForm:**  A form for adding new tasks.  It takes a `addTask` prop, which is a function to add a new task to the task list.\n    *   **TaskList:** Renders a list of tasks. It takes `tasks`, `deleteTask`, and `toggleComplete` props.\n    *   **Task:**  Represents an individual task. It includes the task text, a checkbox to mark the task as complete, and a delete button.\n\n6.  **localStorage:** Uses `localStorage` to persist the task data between sessions.\n\n7.  **No External UI Libraries:**  This example adheres to the requirements of *not* using any other UI libraries besides `lucide-react`.  The styling is handled entirely with Tailwind CSS.\n\n**How to Run:**\n\n1.  **Install Dependencies:**  Navigate to the project directory in your terminal and run:\n\n    ```bash\n    npm install\n    ```\n\n2.  **Start the Development Server:**\n\n    ```bash\n    npm run dev\n    ```\n\n    This will start the Vite development server, and you should be able to access your application in your browser (usually at `http://localhost:5173/`).\n\n**Key Improvements and Best Practices:**\n\n*   **Component-Based Structure:** Improves code organization and reusability.\n*   **Clear Separation of Concerns:** Each component has a specific responsibility.\n*   **Tailwind CSS Styling:** Provides a consistent and maintainable styling approach.\n*   **`localStorage` Persistence:**  Saves task data so it\'s not lost on browser refresh.\n*   **Error Handling (Minimal):** Added a `trim()` to the TaskForm to prevent adding empty tasks.  More robust error handling could be added for production.\n*   **Accessibility:** Consider adding ARIA attributes and other accessibility features to make your application more accessible.\n*   **Comments:**  Adding comments to explain complex logic is always a good practice.\n*   **Typescript (Optional):** Consider using TypeScript for larger projects to improve code maintainability and prevent errors.  This would involve renaming `.js` files to `.tsx` or `.ts` and adding type definitions.\n*   **Unique Keys:** Using `task.id` as the key for the `Task` component in the `TaskList` improves React\'s performance when re-rendering the list.\n*   **Consistent Naming:** Uses camelCase for variable names and PascalCase for component names consistently.\n\nThis provides a solid foundation for a React-based todo app using Vite and Tailwind CSS. You can expand upon this structure by adding more features, styling, and functionality as needed. Remember to adapt the code to your specific requirements and preferences.\n',
        },
      ],
    },
  ],
});

//const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
//console.log(result.response.text());
